#+title: Devices


* GenericDevice
~GenericDevice(ABC)~ defined in [[.generic_device]] is an Abstract Base Class, which
means that it cannot be used directly, but is used for extending. This is so to
ensure the interoperability among different devices and signals.

~GenericDevice(ABC)~ requires all of its children to have:
  + *class* variable ~ports~ of dictionary type, where the key is the label and the
    value is ~Port~ object implemented in [[./port.py]],
  + *class* variable ~power_average~, specifying in type ~float~ the average power usage of device
    in Watts (for passive devices can be set to 0),
  + *class* variable ~power_peak~, specifying in type ~float~ the peak power draw of device
    in Watts (for passive devices can be set to 0),
  + *class* variable ~reference~, of type ~Reference~ implemented in
    [[../extra/reference.py]]; if possible the device implementation should stem
    form a published article; later simulations can compile list of the
    references used in specific simulation,
  + *method* ~compute_outputs(self)~, the method must be decorated with
    ~@wait_input_compute~ and ~@ensure_output_compute~ decorators; The decorators
    make sure that the computation only starts when the input Signals are
    calculated and it raises an exception when the ~compute_outputs(self)~ method
    finishes and doesn't set ~computed~ flag of the Signals on the output ports.

** Beam Splitter
We define a generic beam splitter to set the stage for the framework.
